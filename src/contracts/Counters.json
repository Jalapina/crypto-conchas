{
  "contractName": "Counters",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath} overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a635cec58fb4141a16cfd408f1a21ac944c335a3beaba541c35d2e95c04536f\",\"dweb:/ipfs/QmXWcz73UenN1ji8jiWMbzxHjjfLbNQwLVKTEB5zNFE34K\"]},\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0x2424442932373c51391b31409f9620d1e1396c37f41ab9d82c51d69bebdd1ab5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dcdf37ee59c10644338fbdfb3b7692125ff42003b34990eff8b04beedd89846f\",\"dweb:/ipfs/QmTMAvXQ4DoZbUSS3oBkNr2SddRPCTrE7DZNXrFArHnk8x\"]}},\"version\":1}",
  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122021c3b473bb9d97ac079a1e93960a7a5a7c45d8797e09dad268a6ae1e7d4cb4d864736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122021c3b473bb9d97ac079a1e93960a7a5a7c45d8797e09dad268a6ae1e7d4cb4d864736f6c63430007060033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "662:848:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "662:848:11:-:0;;;;;;;;",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n",
  "sourcePath": "@openzeppelin/contracts/utils/Counters.sol",
  "ast": {
    "absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
    "exportedSymbols": {
      "Counters": [
        2038
      ],
      "SafeMath": [
        533
      ]
    },
    "id": 2039,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1990,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:11"
      },
      {
        "absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
        "file": "../math/SafeMath.sol",
        "id": 1991,
        "nodeType": "ImportDirective",
        "scope": 2039,
        "sourceUnit": 534,
        "src": "58:30:11",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 1992,
          "nodeType": "StructuredDocumentation",
          "src": "90:571:11",
          "text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`\n Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n directly accessed."
        },
        "fullyImplemented": true,
        "id": 2038,
        "linearizedBaseContracts": [
          2038
        ],
        "name": "Counters",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 1995,
            "libraryName": {
              "id": 1993,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 533,
              "src": "691:8:11",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$533",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "685:27:11",
            "typeName": {
              "id": 1994,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "704:7:11",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "canonicalName": "Counters.Counter",
            "id": 1998,
            "members": [
              {
                "constant": false,
                "id": 1997,
                "mutability": "mutable",
                "name": "_value",
                "nodeType": "VariableDeclaration",
                "scope": 1998,
                "src": "1057:14:11",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1996,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1057:7:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Counter",
            "nodeType": "StructDefinition",
            "scope": 2038,
            "src": "718:374:11",
            "visibility": "public"
          },
          {
            "body": {
              "id": 2008,
              "nodeType": "Block",
              "src": "1172:38:11",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 2005,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2000,
                      "src": "1189:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                        "typeString": "struct Counters.Counter storage pointer"
                      }
                    },
                    "id": 2006,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "_value",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 1997,
                    "src": "1189:14:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 2004,
                  "id": 2007,
                  "nodeType": "Return",
                  "src": "1182:21:11"
                }
              ]
            },
            "id": 2009,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "current",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2001,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2000,
                  "mutability": "mutable",
                  "name": "counter",
                  "nodeType": "VariableDeclaration",
                  "scope": 2009,
                  "src": "1115:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 1999,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1998,
                    "src": "1115:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1114:25:11"
            },
            "returnParameters": {
              "id": 2004,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2003,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2009,
                  "src": "1163:7:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2002,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1163:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1162:9:11"
            },
            "scope": 2038,
            "src": "1098:112:11",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2020,
              "nodeType": "Block",
              "src": "1269:125:11",
              "statements": [
                {
                  "expression": {
                    "id": 2018,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2014,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2011,
                        "src": "1368:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 2016,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1997,
                      "src": "1368:14:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 2017,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1386:1:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1368:19:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2019,
                  "nodeType": "ExpressionStatement",
                  "src": "1368:19:11"
                }
              ]
            },
            "id": 2021,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2012,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2011,
                  "mutability": "mutable",
                  "name": "counter",
                  "nodeType": "VariableDeclaration",
                  "scope": 2021,
                  "src": "1235:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 2010,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1998,
                    "src": "1235:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1234:25:11"
            },
            "returnParameters": {
              "id": 2013,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1269:0:11"
            },
            "scope": 2038,
            "src": "1216:178:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2036,
              "nodeType": "Block",
              "src": "1453:55:11",
              "statements": [
                {
                  "expression": {
                    "id": 2034,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 2026,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2023,
                        "src": "1463:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 2028,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1997,
                      "src": "1463:14:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "31",
                          "id": 2032,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1499:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 2029,
                            "name": "counter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2023,
                            "src": "1480:7:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                              "typeString": "struct Counters.Counter storage pointer"
                            }
                          },
                          "id": 2030,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1997,
                          "src": "1480:14:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2031,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 382,
                        "src": "1480:18:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 2033,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1480:21:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1463:38:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2035,
                  "nodeType": "ExpressionStatement",
                  "src": "1463:38:11"
                }
              ]
            },
            "id": 2037,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decrement",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2024,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2023,
                  "mutability": "mutable",
                  "name": "counter",
                  "nodeType": "VariableDeclaration",
                  "scope": 2037,
                  "src": "1419:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 2022,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1998,
                    "src": "1419:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$1998_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1418:25:11"
            },
            "returnParameters": {
              "id": 2025,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1453:0:11"
            },
            "scope": 2038,
            "src": "1400:108:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 2039,
        "src": "662:848:11"
      }
    ],
    "src": "33:1478:11"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "@openzeppelin/contracts/utils/Counters.sol",
      "exportedSymbols": {
        "Counters": [
          2038
        ],
        "SafeMath": [
          533
        ]
      },
      "license": "MIT"
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.7",
            ".0"
          ]
        },
        "id": 1990,
        "name": "PragmaDirective",
        "src": "33:23:11"
      },
      {
        "attributes": {
          "SourceUnit": 534,
          "absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
          "file": "../math/SafeMath.sol",
          "scope": 2039,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 1991,
        "name": "ImportDirective",
        "src": "58:30:11"
      },
      {
        "attributes": {
          "abstract": false,
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "library",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            2038
          ],
          "name": "Counters",
          "scope": 2039
        },
        "children": [
          {
            "attributes": {
              "text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`\n Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n directly accessed."
            },
            "id": 1992,
            "name": "StructuredDocumentation",
            "src": "90:571:11"
          },
          {
            "children": [
              {
                "attributes": {
                  "name": "SafeMath",
                  "referencedDeclaration": 533,
                  "type": "library SafeMath"
                },
                "id": 1993,
                "name": "UserDefinedTypeName",
                "src": "691:8:11"
              },
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 1994,
                "name": "ElementaryTypeName",
                "src": "704:7:11"
              }
            ],
            "id": 1995,
            "name": "UsingForDirective",
            "src": "685:27:11"
          },
          {
            "attributes": {
              "canonicalName": "Counters.Counter",
              "name": "Counter",
              "scope": 2038,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "constant": false,
                  "mutability": "mutable",
                  "name": "_value",
                  "scope": 1998,
                  "stateVariable": false,
                  "storageLocation": "default",
                  "type": "uint256",
                  "visibility": "internal"
                },
                "children": [
                  {
                    "attributes": {
                      "name": "uint256",
                      "type": "uint256"
                    },
                    "id": 1996,
                    "name": "ElementaryTypeName",
                    "src": "1057:7:11"
                  }
                ],
                "id": 1997,
                "name": "VariableDeclaration",
                "src": "1057:14:11"
              }
            ],
            "id": 1998,
            "name": "StructDefinition",
            "src": "718:374:11"
          },
          {
            "attributes": {
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "current",
              "scope": 2038,
              "stateMutability": "view",
              "virtual": false,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "counter",
                      "scope": 2009,
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "type": "struct Counters.Counter",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "Counter",
                          "referencedDeclaration": 1998,
                          "type": "struct Counters.Counter"
                        },
                        "id": 1999,
                        "name": "UserDefinedTypeName",
                        "src": "1115:7:11"
                      }
                    ],
                    "id": 2000,
                    "name": "VariableDeclaration",
                    "src": "1115:23:11"
                  }
                ],
                "id": 2001,
                "name": "ParameterList",
                "src": "1114:25:11"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "",
                      "scope": 2009,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 2002,
                        "name": "ElementaryTypeName",
                        "src": "1163:7:11"
                      }
                    ],
                    "id": 2003,
                    "name": "VariableDeclaration",
                    "src": "1163:7:11"
                  }
                ],
                "id": 2004,
                "name": "ParameterList",
                "src": "1162:9:11"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 2004
                    },
                    "children": [
                      {
                        "attributes": {
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "member_name": "_value",
                          "referencedDeclaration": 1997,
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 2000,
                              "type": "struct Counters.Counter storage pointer",
                              "value": "counter"
                            },
                            "id": 2005,
                            "name": "Identifier",
                            "src": "1189:7:11"
                          }
                        ],
                        "id": 2006,
                        "name": "MemberAccess",
                        "src": "1189:14:11"
                      }
                    ],
                    "id": 2007,
                    "name": "Return",
                    "src": "1182:21:11"
                  }
                ],
                "id": 2008,
                "name": "Block",
                "src": "1172:38:11"
              }
            ],
            "id": 2009,
            "name": "FunctionDefinition",
            "src": "1098:112:11"
          },
          {
            "attributes": {
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "increment",
              "scope": 2038,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "counter",
                      "scope": 2021,
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "type": "struct Counters.Counter",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "Counter",
                          "referencedDeclaration": 1998,
                          "type": "struct Counters.Counter"
                        },
                        "id": 2010,
                        "name": "UserDefinedTypeName",
                        "src": "1235:7:11"
                      }
                    ],
                    "id": 2011,
                    "name": "VariableDeclaration",
                    "src": "1235:23:11"
                  }
                ],
                "id": 2012,
                "name": "ParameterList",
                "src": "1234:25:11"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 2013,
                "name": "ParameterList",
                "src": "1269:0:11"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "+=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "member_name": "_value",
                              "referencedDeclaration": 1997,
                              "type": "uint256"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 2011,
                                  "type": "struct Counters.Counter storage pointer",
                                  "value": "counter"
                                },
                                "id": 2014,
                                "name": "Identifier",
                                "src": "1368:7:11"
                              }
                            ],
                            "id": 2016,
                            "name": "MemberAccess",
                            "src": "1368:14:11"
                          },
                          {
                            "attributes": {
                              "hexvalue": "31",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "token": "number",
                              "type": "int_const 1",
                              "value": "1"
                            },
                            "id": 2017,
                            "name": "Literal",
                            "src": "1386:1:11"
                          }
                        ],
                        "id": 2018,
                        "name": "Assignment",
                        "src": "1368:19:11"
                      }
                    ],
                    "id": 2019,
                    "name": "ExpressionStatement",
                    "src": "1368:19:11"
                  }
                ],
                "id": 2020,
                "name": "Block",
                "src": "1269:125:11"
              }
            ],
            "id": 2021,
            "name": "FunctionDefinition",
            "src": "1216:178:11"
          },
          {
            "attributes": {
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "decrement",
              "scope": 2038,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "counter",
                      "scope": 2037,
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "type": "struct Counters.Counter",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "Counter",
                          "referencedDeclaration": 1998,
                          "type": "struct Counters.Counter"
                        },
                        "id": 2022,
                        "name": "UserDefinedTypeName",
                        "src": "1419:7:11"
                      }
                    ],
                    "id": 2023,
                    "name": "VariableDeclaration",
                    "src": "1419:23:11"
                  }
                ],
                "id": 2024,
                "name": "ParameterList",
                "src": "1418:25:11"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 2025,
                "name": "ParameterList",
                "src": "1453:0:11"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "member_name": "_value",
                              "referencedDeclaration": 1997,
                              "type": "uint256"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 2023,
                                  "type": "struct Counters.Counter storage pointer",
                                  "value": "counter"
                                },
                                "id": 2026,
                                "name": "Identifier",
                                "src": "1463:7:11"
                              }
                            ],
                            "id": 2028,
                            "name": "MemberAccess",
                            "src": "1463:14:11"
                          },
                          {
                            "attributes": {
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "isStructConstructorCall": false,
                              "lValueRequested": false,
                              "names": [
                                null
                              ],
                              "tryCall": false,
                              "type": "uint256",
                              "type_conversion": false
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    }
                                  ],
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "member_name": "sub",
                                  "referencedDeclaration": 382,
                                  "type": "function (uint256,uint256) pure returns (uint256)"
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "member_name": "_value",
                                      "referencedDeclaration": 1997,
                                      "type": "uint256"
                                    },
                                    "children": [
                                      {
                                        "attributes": {
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 2023,
                                          "type": "struct Counters.Counter storage pointer",
                                          "value": "counter"
                                        },
                                        "id": 2029,
                                        "name": "Identifier",
                                        "src": "1480:7:11"
                                      }
                                    ],
                                    "id": 2030,
                                    "name": "MemberAccess",
                                    "src": "1480:14:11"
                                  }
                                ],
                                "id": 2031,
                                "name": "MemberAccess",
                                "src": "1480:18:11"
                              },
                              {
                                "attributes": {
                                  "hexvalue": "31",
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "token": "number",
                                  "type": "int_const 1",
                                  "value": "1"
                                },
                                "id": 2032,
                                "name": "Literal",
                                "src": "1499:1:11"
                              }
                            ],
                            "id": 2033,
                            "name": "FunctionCall",
                            "src": "1480:21:11"
                          }
                        ],
                        "id": 2034,
                        "name": "Assignment",
                        "src": "1463:38:11"
                      }
                    ],
                    "id": 2035,
                    "name": "ExpressionStatement",
                    "src": "1463:38:11"
                  }
                ],
                "id": 2036,
                "name": "Block",
                "src": "1453:55:11"
              }
            ],
            "id": 2037,
            "name": "FunctionDefinition",
            "src": "1400:108:11"
          }
        ],
        "id": 2038,
        "name": "ContractDefinition",
        "src": "662:848:11"
      }
    ],
    "id": 2039,
    "name": "SourceUnit",
    "src": "33:1478:11"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.6+commit.7338295f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-09-18T01:39:59.987Z",
  "devdoc": {
    "author": "Matt Condon (@shrugs)",
    "details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath} overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.",
    "kind": "dev",
    "methods": {},
    "title": "Counters",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}