{"version":3,"sources":["drizzleOptions.js","components/header.js","components/nft.js","CryptoConchas.js","components/layout.js","App.js","reportWebVitals.js","index.js","assets/menu.module.scss"],"names":["options","web3","block","contracts","events","SimpleStorage","Header","contract","className","contractName","Nft","data","useState","imageSource","NftIsClicked","setNftIsClicked","nftExpanded","React","useCallback","onClick","menuStyles","metadata","name","tokenId","description","category","href","owner","split","splice","address","width","src","cid","ContractData","newContextComponents","DisplayImage","NftData","useContext","AppContext","state","dispatch","nftMetadata","setNftMetadata","setOwner","GetURI","a","drizzle","CryptoConchasRinkeby","methods","ownerOf","call","_owner","tokenURI","nftURI","test","console","log","fetch","headers","then","json","catch","err","useEffect","drizzleState","method","methodArgs","render","CryptoConchas","imageUploaderRef","useRef","artwork","setArtwork","imageCount","setBatchImageCount","loading","setLoading","txQueue","setTxQueue","initialNftState","nftData","setNftData","clearPreview","current","clearPictures","createNFTTransaction","hash","publicUrl","removeFromQueue","newTxQueue","filter","uri","mint","send","from","accounts","error","handleBatchMint","newTokenId","parseInt","i","length","date","Date","timestamp","getTime","fleekStorage","upload","apiKey","apiSecret","key","url","toLowerCase","image_url","external_url","image_hash","JSON","stringify","isEnabled","contractList","target","rel","Jumbotron","withIcon","buttonText","onChange","picture","imgExtension","maxFileSize","singleImage","withPreview","ref","iu","disabled","type","placeholder","value","required","e","currentTarget","supply","Button","Spinner","animation","variant","size","balanceOf","emptyArray","arrayLength","Number","push","map","_","index","createContext","initialState","categoryNumber","reducer","action","update","$set","Layout","useReducer","Provider","tag","Drizzle","drizzleOptions","App","Consumer","drizzleContext","initialized","status","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.944ca4ac.chunk.js","sourcesContent":["import Web3 from \"web3\";\nimport CryptoConchasRinkeby from \"./contracts/CryptoConchasRinkeby.json\";\n\nconst options = {\n  \n  web3: {\n    block: false,\n    // customProvider: new Web3(\"ws://localhost:7545\"),\n    // fallback: {\n    //   type: 'ws',\n    //   url: 'ws://127.0.0.1:7545'\n    // },\n  },\n\n  contracts: [CryptoConchasRinkeby],\n  events: {\n    SimpleStorage: [\"StorageSet\"],\n  },\n\n};\n\nexport default options;\n","import React from \"react\";\nimport \"../assets/header.sass\"\n\nconst Header = (contract) => {\n\n    return (\n        <header>\n            <h1 className=\"dApp-title\">{contract.contractName}</h1>\n        </header>\n  );\n};\n\nexport default Header;\n","\nimport React, {useState} from 'react';\nimport * as menuStyles from \"../assets/menu.module.scss\";\n\nconst sliptAddressText = (address) =>{\n  return address.split(\"\").splice(-5);\n}\n\nconst Nft = (data) => {\n  const [imageSource, setimageSource] = useState(data);\n\n  const[NftIsClicked, setNftIsClicked] = useState(false)\n  const nftExpanded = React.useCallback(() => setNftIsClicked(!NftIsClicked));\n  \n  return (\n    <div onClick={nftExpanded} className=\"nft-container\">\n    <div className={`nft ${menuStyles.menu} ${\n      NftIsClicked ? `${menuStyles.open}` : \"\"\n    }`}>\n      {NftIsClicked ?(\n          <div>\n            <h2>{data.metadata.name} #{data.tokenId} </h2>\n            <p>{data.metadata.description ? data.metadata.description : data.metadata.category}</p>\n            <p>Owner: <a className=\"owner-address\" href={`https://Rinkeby.etherscan.io/address/${data.owner}`}>{sliptAddressText(data.owner)}</a></p>\n            <a href={`https://testnets.opensea.io/assets/`+data.address+`/`+data.tokenId}>OpenSea</a>\n          </div>\n        ): \"\"}\n        <button className=\"buy-button\">\n          Buy\n        </button>\n        <img className=\"artwork\" width=\"450px\" src={`https://ipfs.fleek.co/ipfs/${imageSource.cid}`} />\n        \n      </div>\n      <img className=\"artwork\" width=\"250px\" src={`https://ipfs.fleek.co/ipfs/${imageSource.cid}`} />\n    </div>\n  )\n};\n\nexport default Nft;","import React, { useState, useRef, useEffect, useContext } from \"react\";\nimport { Spinner, Button, Jumbotron } from 'react-bootstrap';\nimport fleekStorage from '@fleekhq/fleek-storage-js';\nimport { newContextComponents, AccountData } from \"@drizzle/react-components\";\nimport ImageUploader from \"react-images-upload\";\nimport \"./assets/index.sass\"\nimport \"./assets/loader.css\"\nimport { AppContext } from \"./components/layout.js\";\nimport Nft from './components/nft.js'\n\nconst { ContractData } = newContextComponents;\n\nconst sliptAddressText = (address) =>{\n  return address.split(\"\").splice(-5);\n}\n\nconst DisplayImage = (NftData) => {\n  \n  const {state, dispatch} = useContext(AppContext);\n  \n  const changeIndexValue = (newValue) => {\n    dispatch({ type: 'UPDATE_INDEX', data: newValue});\n  };\n\n  const [nftMetadata, setNftMetadata] = useState()\n  const [owner, setOwner] = useState()\n\n  const sliptAddressText = (address) =>{\n    return address.split(\"\").splice(-5);\n  }\n\n  const isUrlValid = (url) =>{\n    return /^(https?|s?ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(url);\n  } \n\n\n  const GetURI = async (data) => {\n    \n    const _owner = await data.drizzle.contracts.CryptoConchasRinkeby.methods.ownerOf(data.tokenId).call()\n    \n    setOwner(_owner);\n\n    if(data === \"undefined\") return [];\n    \n    const nftURI = await data.drizzle.contracts.CryptoConchasRinkeby.methods.tokenURI(data.tokenId).call()\n    \n    if(!isUrlValid(nftURI)) return console.log(\"No URI: \", nftURI);\n  \n    await fetch(nftURI , {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      })\n      .then(data => {\n        return data.json();\n      })\n      .then(data => {\n        console.log(data)\n        return setNftMetadata(data || []);\n      })\n      .catch(err => {\n        return console.log(err);\n    });\n    \n  };\n\n  const callUri = async() =>{\n    const data = await GetURI(NftData)\n    setNftMetadata(data)\n  }\n\n  useEffect(() => {\n  }, [nftMetadata]);\n\n  useEffect(() => {\n    GetURI(NftData)\n  }, [NftData.tokenId]);\n\n  return (\n    <div className=\"token-container\">\n\n      <ContractData\n        drizzle={NftData.drizzle}\n        drizzleState={NftData.drizzleState}\n        contract=\"CryptoConchasRinkeby\"\n        method=\"CID\"\n        methodArgs={[NftData.tokenId]}\n        render={(cid) =>(\n          <div className=\"token-container\">\n            <Nft cid={cid} address={NftData.address} owner={owner} metadata={nftMetadata} tokenId={NftData.tokenId} />\n          </div>\n        )}\n      />\n\n    </div>\n  );\n\n}\n\nconst CryptoConchas = ({ drizzle, drizzleState }) => { \n  \n  const imageUploaderRef = useRef(null);\n  const [artwork, setArtwork] = useState([]);\n  const [imageCount, setBatchImageCount] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [txQueue, setTxQueue] = useState([]);\n  const [nftStuff, setNftStuff] = useState();\n  \n  const initialNftState = {name: \"\", category: \"\"}\n  \n  const [nftData, setNftData] = useState(initialNftState);\n  const [tokenId, setTokenId] = useState();\n\n\n  const onDrop = (picture) => { //Image is being uploaded\n\n    console.log(\"pictures: \",picture);\n\n    if(picture.length>1 && imageCount == 1){\n      return setArtwork(picture);\n    }else if(picture.length>0){\n      setArtwork(artwork => [...artwork, picture[imageCount-1]]);\n      setBatchImageCount(imageCount+1);\n      return console.log(artwork,imageCount);\n    }\n    setArtwork([picture[0]]);\n    return console.log(artwork);\n    \n  };\n\n  const clearPreview = () => {\n    setArtwork([]);\n    imageUploaderRef.current.clearPictures();\n  };\n\n  const createNFTTransaction = async (hash, publicUrl) => {\n\n    const tokenURI = `https://ipfs.io/ipfs/${hash}`;\n\n    const removeFromQueue = () => {\n      const newTxQueue = txQueue.filter((uri) => uri !== tokenURI);\n      setTxQueue(newTxQueue);\n    };\n\n    try {\n      setTxQueue([...txQueue, tokenURI]);\n\n      await drizzle.contracts.CryptoConchasRinkeby.methods.mint(hash,publicUrl).send({from: drizzleState.accounts[0]});\n\n      setNftData(initialNftState);\n    } catch (e) {\n      console.error(e);\n      setNftData(initialNftState);      \n      removeFromQueue(tokenURI);\n    }\n  };\n  \n\n  const handleButtonClick = async (newTokenId) => {\n\n    setLoading(true)\n    \n    try {\n      const date = new Date();\n      const timestamp = date.getTime();\n\n      const { hash } = await fleekStorage.upload({\n        apiKey: \"ezmuRXUXulan6Kj0PXU4LA==\",\n        apiSecret: \"W7gKpPrEtZGS9WGhZyYa130VXtJZ9CROCguNoxHLq2A=\",\n        key: `nft/${newTokenId}-${timestamp}`,\n        data: artwork,\n      });\n\n      const url = {\n        name: nftData.name,\n        category: nftData.category.toLowerCase(),\n        description: nftData.category,\n        image_url: \"https://ipfs.fleek.co/ipfs/\"+hash,\n        image_hash: hash\n      }\n\n      const { publicUrl } = await fleekStorage.upload({\n        apiKey: \"ezmuRXUXulan6Kj0PXU4LA==\",\n        apiSecret: \"W7gKpPrEtZGS9WGhZyYa130VXtJZ9CROCguNoxHLq2A=\",\n        key: `nft/${newTokenId}-${timestamp}`,\n        data: JSON.stringify(url),\n      });\n      \n      setLoading(false);\n      clearPreview();\n      createNFTTransaction(hash, publicUrl);\n    } catch (e) {\n      console.error(e);\n      setLoading(false);\n    }\n  };\n\n  const handleBatchMint = async (newTokenId) => {\n    console.log(artwork)\n    setLoading(true);\n    let tokenId = parseInt(newTokenId);\n\n    try {\n      \n      for(let i=0; i<artwork.length;i++){\n        \n        try {\n          \n          const date = new Date();\n          const timestamp = date.getTime();\n          tokenId += 1\n          \n          const { hash } = await fleekStorage.upload({\n            apiKey: \"5p1Nxgb8eIEOEYjwduM4Fg==\",\n            apiSecret: \"HC4pKXrmEITQwS0bC9fXwrbiPnwEhfUcXoao7JoHCu8=\",\n            key: `nft/${tokenId}-${timestamp}`,\n            data: artwork[i],\n          });\n    \n          const url = {\n            name: nftData.name,\n            category: nftData.category.toLowerCase(),\n            description: nftData.category,\n            image_url: \"https://ipfs.fleek.co/ipfs/\"+hash,\n            external_url: \"https://CryptoConchas.io/\",\n            image_hash: hash\n          }\n    \n          const { publicUrl } = await fleekStorage.upload({\n            apiKey: \"5p1Nxgb8eIEOEYjwduM4Fg==\",\n            apiSecret: \"HC4pKXrmEITQwS0bC9fXwrbiPnwEhfUcXoao7JoHCu8=\",\n            key: `nft/${tokenId}-${timestamp}`,\n            data: JSON.stringify(url),\n          });\n\n          console.log(\"Token ID: \"+tokenId+\" Sending hash: \"+hash+\" and metadata: \"+publicUrl);\n\n          await createNFTTransaction(hash, publicUrl);\n        } catch (e) {\n          setLoading(false);\n          return console.error(e);\n        }\n\n\n      }\n\n      setTxQueue([]);\n      clearPreview();\n      setLoading(false);\n    }catch (e) {\n      setLoading(false);\n      console.error(e);\n    }\n\n    setBatchImageCount(1)    \n    setArtwork([])\n    \n  }\n\n  const isEnabled = nftData.name.length > 0 && nftData.category.length > 1;\n\n  return (\n    <div className=\"App\">\n      <div className=\"subtitle\">\n        {\"ERC-721 Address: \"}\n        <a\n          href={`https://Rinkeby.etherscan.io/address/${drizzle.contractList[0].address}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {drizzle.contractList[0].address}\n          </a>\n      </div>\n\n      <Jumbotron>\n        <div className=\"add-nft-title\">\n          <p>This app runs on the Rinkeby Testnet</p>\n        </div>\n        <div className=\"steps\">\n          <span>Upload a concha</span>\n        </div>\n        <div className=\"uploader\">\n          <ImageUploader\n            withIcon={true}\n            buttonText=\"Choose image\"\n            onChange={onDrop}\n            imgExtension={[\".jpg\",\".mov\",\".jpeg\", \".gif\", \".png\", \".gif\"]}\n            maxFileSize={5242880}\n            singleImage={false}\n            withPreview\n            ref={iu => imageUploaderRef.current = iu}\n          />\n        </div>\n\n        <div className=\"steps\">\n          <span>Create an NFT!</span>\n          <div>\n            Connect to the Rinkeby Network on Metamask\n          </div>\n        </div>\n\n        <div className=\"nft-form-container\">\n          <form>\n            <input disabled={!artwork} type=\"text\" placeholder=\"Your NFT name\" name=\"name\" value={nftData.name} required onChange={e => setNftData({...nftData,name:e.currentTarget.value})} />\n            <input disabled={!artwork} type=\"text\" placeholder=\"NFT category\" name=\"category\" value={nftData.category} required onChange={e => setNftData({...nftData,category:e.currentTarget.value})} />\n          </form>\n        </div>\n\n        <ContractData\n          drizzle={drizzle}\n          drizzleState={drizzleState}\n          contract=\"CryptoConchasRinkeby\"\n          method=\"totalSupply\"\n          render={(supply) => (\n            <div>\n              <Button\n                disabled={!artwork || loading || !isEnabled}\n                onClick={() => handleBatchMint(supply)}\n                className=\"button\"\n              >\n              {loading\n                ? <Spinner animation=\"border\" variant=\"light\" size=\"sm\" />\n                : <span>Create NFT</span>\n              }\n            </Button>\n          </div>\n          )}\n        />\n\n        <div className=\"steps\">\n          Your artwork will appear in your collection once the transaction is accepted\n        </div>\n\n        <div>\n          {txQueue.length === 1 && (\n            <div>\n              <div className=\"lds-grid\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n              <div>Minting a new token...</div>\n            </div>\n          )}\n          {txQueue.length > 1 && (\n            <div>\n              <div className=\"lds-grid\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n              <div>Minting {txQueue.length} new tokens...</div>\n            </div>\n          )}\n        </div>\n        {\n          txQueue.length > 0 && (\n            <div>\n              <Spinner animation=\"border\" />\n            </div>\n          )\n        }\n\n      </Jumbotron>\n\n      <div className=\"collection-title\"><h1>Collection</h1></div>\n\n      <div className=\"colleciton-subtitle\">These fine pieces of art belong to: \n        <a href={`https://rinkeby.etherscan.io/address/${drizzleState.accounts[0]}`} target=\"_blank\" rel=\"noopener noreferrer\">\n          {drizzleState.accounts[0].address}\n        </a>\n      </div>\n    \n     <ContractData\n        drizzle={drizzle}\n        drizzleState={drizzleState}\n        contract=\"CryptoConchasRinkeby\"\n        method=\"balanceOf\"\n        methodArgs={[drizzleState.accounts[0]]}\n        render={(balanceOf) => {\n          const emptyArray = [];\n          const arrayLength = Number(balanceOf);\n          for(let i=0;i<arrayLength;i++){ emptyArray.push('') }\n          if(emptyArray.length === 0) {\n            return (\n              <Jumbotron className=\"no-artwork\">\n                You have no artwork in your collection!\n              </Jumbotron>\n            )\n          }\n          return (\n              <div className=\"collection-container\">\n                  {emptyArray.map(( _, index) => {\n                    return (\n                      <ContractData\n                        key={index}\n                        drizzle={drizzle}\n                        drizzleState={drizzleState}\n                        contract=\"CryptoConchasRinkeby\"\n                        method=\"tokenOfOwnerByIndex\"\n                        methodArgs={[drizzleState.accounts[0], arrayLength - 1 - index]}\n                        render={(tokenId) => (\n                            <ContractData\n                              key={index}\n                              drizzle={drizzle}\n                              drizzleState={drizzleState}\n                              contract=\"CryptoConchasRinkeby\"\n                              method=\"tokenURI\"\n                              methodArgs={[tokenId]}\n                              render={(uri) =>  (\n                                <div>\n                                  <DisplayImage address={drizzle.contractList[0].address} tokenId={tokenId} drizzle={drizzle} drizzleState={drizzleState} />\n                                </div>\n                              )}\n                            />\n                        )}\n                      />\n\n                    )}\n                  )}\n              </div>\n            );\n        }}\n      />\n\n    </div>\n    \n  );\n\n};\n\nexport default CryptoConchas\n","import React, { useReducer } from 'react'\nimport update from 'immutability-helper';\nimport Header from './header.js'\n// import Menu from './menu.js'\n// import Footer from './footer.js'\nimport '../index.css'\nimport CryptoConchas from '../CryptoConchas'\nimport { newContextComponents, AccountData } from \"@drizzle/react-components\";\n\nexport const AppContext = React.createContext();\nconst { ContractData } = newContextComponents;\n\nconst initialState = {\n\n    categoryNumber: 0,\n  };\n  \nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'UPDATE_INDEX':\n            return update(state, {\n                categoryNumber: {$set: action.data},\n            });\n  \n        default:\n            return initialState;\n    }\n}\n\nconst Layout = ({ drizzle, drizzleState }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    console.log(drizzle.contractList[0])\n     return (\n        <AppContext.Provider value={{ state, dispatch }}>\n            <div className=\"\">\n                <div className=\"\">\n                    <Header contractName={drizzle.contractList[0].contractName}/>\n                    <div className=\"title\">\n                    {state.tag}\n                    </div>\n                    {/* <Menu /> */}\n                    <CryptoConchas drizzle={drizzle} drizzleState={drizzleState} />\n                </div>\n                {/* <Footer /> */}\n            </div>\n        </AppContext.Provider>\n    )\n}\n\nexport default Layout\n","import React from \"react\";\nimport { Jumbotron } from 'react-bootstrap';\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { Drizzle } from \"@drizzle/store\";\nimport drizzleOptions from \"./drizzleOptions\";\nimport \"./App.css\";\nimport Layout from \"./components/layout.js\";\n\nconst drizzle = new Drizzle(drizzleOptions);\n\nconst App = () => {\n  return (\n    <DrizzleContext.Provider drizzle={drizzle}>\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const { drizzle, drizzleState, initialized } = drizzleContext;\n\n          if (!initialized || drizzleState.web3.status === 'failed') {\n            return (\n              <Jumbotron className=\"loading-jumbo\">\n                <div className=\"loading-text\">\n                  <div>Connect Metamask to start the app</div>\n                  <div>This app works on the Ropsten Testnet</div>\n                </div>\n              </Jumbotron>\n            )\n          }\n\n          return (\n            <Layout drizzle={drizzle} drizzleState={drizzleState} />\n          )\n        }}\n      </DrizzleContext.Consumer>\n    </DrizzleContext.Provider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"menu_menu__3-d_J\",\"open\":\"menu_open__2ag0y\",\"cats\":\"menu_cats__3Fv-P\",\"h1\":\"menu_h1__10BbX\",\"h3\":\"menu_h3__35GcD\"};"],"sourceRoot":""}